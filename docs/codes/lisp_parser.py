# This file is automatically generated by EBNFParser.
from Ruikowa.ObjectRegex.Tokenizer import unique_literal_cache_pool, regex_matcher, char_matcher, str_matcher, Tokenizer
from Ruikowa.ObjectRegex.Node import AstParser, Ref, SeqParser, LiteralValueParser as L, LiteralNameParser, Undef
namespace = globals()
recur_searcher = set()
token_table = ((unique_literal_cache_pool["space"], regex_matcher('\s')),
               (unique_literal_cache_pool["Atom"], regex_matcher('[^\(\)\s\`]+')),
               (unique_literal_cache_pool["auto_const"], char_matcher(('`', ')', '('))))

class UNameEnum:
# names

    space = unique_literal_cache_pool['space']
    Atom = unique_literal_cache_pool['Atom']
    Expr = unique_literal_cache_pool['Expr']
    Quote = unique_literal_cache_pool['Quote']
    Stmts = unique_literal_cache_pool['Stmts']
        
cast_map = {}
token_func = lambda _: Tokenizer.from_raw_strings(_, token_table, ({"space"}, {}),cast_map=cast_map)
space = LiteralNameParser('space')
Atom = LiteralNameParser('Atom')
Expr = AstParser([Ref('Atom')],
                 [Ref('Quote')],
                 ['(', SeqParser([Ref('Expr')], at_least=0,at_most=Undef), ')'],
                 name="Expr",
                 to_ignore=({}, {}))
Quote = AstParser(['`', Ref('Expr')],
                  name="Quote",
                  to_ignore=({}, {}))
Stmts = AstParser([SeqParser([Ref('Expr')], at_least=0,at_most=Undef)],
                  name="Stmts",
                  to_ignore=({}, {}))
Stmts.compile(namespace, recur_searcher)