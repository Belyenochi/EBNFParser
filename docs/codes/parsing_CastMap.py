# This file is automatically generated by EBNFParser.
from Ruikowa.ObjectRegex.Tokenizer import unique_literal_cache_pool, regex_matcher, char_matcher, str_matcher, Tokenizer
from Ruikowa.ObjectRegex.Node import AstParser, Ref, SeqParser, LiteralValueParser as L, LiteralNameParser, Undef
namespace = globals()
recur_searcher = set()
token_table = ((unique_literal_cache_pool["space"], regex_matcher('\s+')),
               (unique_literal_cache_pool["identifier"], regex_matcher('[a-zA-Z_]{1}[a-zA-Z_0-9]*')),
               (unique_literal_cache_pool["keyword"], str_matcher(('public', 'for', 'def'))),)

class UNameEnum:
# names

    space = unique_literal_cache_pool['space']
    identifier = unique_literal_cache_pool['identifier']
    keyword_def = unique_literal_cache_pool['def']
    keyword_for = unique_literal_cache_pool['for']
    keyword_public = unique_literal_cache_pool['public']
    keyword = unique_literal_cache_pool['keyword']
    parserToTest = unique_literal_cache_pool['parserToTest']
        
cast_map = {'def': unique_literal_cache_pool['keyword'], 'for': unique_literal_cache_pool['keyword'], 'public': unique_literal_cache_pool['keyword']}
token_func = lambda _: Tokenizer.from_raw_strings(_, token_table, ({"space"}, {}),cast_map=cast_map)
space = LiteralNameParser('space')
identifier = LiteralNameParser('identifier')
keyword = LiteralNameParser('keyword')
parserToTest = AstParser([SeqParser([Ref('identifier')], [Ref('keyword')], at_least=1,at_most=Undef)],
                         name="parserToTest",
                         to_ignore=({}, {}))
parserToTest.compile(namespace, recur_searcher)