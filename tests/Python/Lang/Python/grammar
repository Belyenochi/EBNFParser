Test    ::= Lambdef | OrTest [ R'if(?!\S)' OrTest R'else(?!\S)' Test] 
Lambdef ::= R'lambda(?!\S)' NameList ':' Test
OrTest	::= AndTest (Or AndTest)* 
AndTest	::= NotTest (And NotTest)*
NotTest	::= Arith  | Not NotTest
Arith	::= Term   ( ('+' | '-') Term )* 
Term	::= Factor ( ('*' | '/' | '%') Factor)* 
Factor	::= AtomExpr | ('+' | '-') Factor
Not	:= R'not(?!\S)'
Or	:= R'or(?!\S)'
And	:= R'and(?!\S)'
Atom	::= Test | Number | Const | Name | '(' (ListComp | TestList) ')' | '[' (ListComp | TestList) ']' 
AtomExpr::= Atom ('[' AtomList ']' | '(' AtomList ')')*
TestList::= Test [',' TestList] 
NameList::= Name (',' Name)*
AtomList::= Atom (',' Atom)*
ListComp::= Test [R'for(?!\S)' NameList R'in(?!\S)' Test] 
Number  := R'\d+|\d*\.\d+'
Const   := R'True(?!\S)|False(?!\S)|None(?!\S)'
Name    := R'[a-zA-Z_][a-zA-Z0-9]*'
NEWLINE := '\n'

