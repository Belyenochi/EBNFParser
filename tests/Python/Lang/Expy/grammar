Stmt   ::= (NEWLINE* Expr* NEWLINE*)*

Expr   ::= BinOp  | Factor  

BinOp  ::= Factor (Op Factor)*

Factor ::= (Op)* AtomExpr

AtomExpr   ::=  (Closure | Atom) ( '[' (Expr)* ']' | '(' (Expr)* ')' | '.' Name )*

Atom       ::= Const | Str | Name | Number | '[' (Expr)* ']' | '('  [ Expr [ ',' [Expr (',' Expr)* ] ] ] ')'

Closure::= '{' (Expr (NEWLINE)* )* '}' | R'def(?!\S)' [Name] '(' tpdef ')' Closure

tpdef  ::= Name*

Op      := R'\/\/|\/|\|\||\||\>\>|\<\<|\>\=|\<\=|\<\-|\>|\<|\=\>|\-\>|\?|\-\-|\+\+|\*\*|\+|\-|\*|\=\=|\=|\~|\@|\$|\%|\^|\&|\!|\:\:|\:'


Number  := R'\d+|\d*\.\d+'
Const   := R'True(?!\S)|False(?!\S)|None(?!\S)'
Str     := R'[a-z]{0,1}"[\w|\W]*"'
Name    := R'[a-zA-Z_][a-zA-Z0-9]*'
NEWLINE := R'\n'
 




 
