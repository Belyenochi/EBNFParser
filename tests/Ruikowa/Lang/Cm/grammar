Token tokendef 
# comments
Any     :=  '^((?!/\*|\*/|\n)[\s\S])*$' ;
multilineComment 
        ::= '/*' (Any 
                | NEWLINE 
                | multilineComment)* '*/'
        ;
Comment:= R'//[^\n]*';
# basics
String  := R'[a-z]*"[\w|\W]*"';

numberLiteral 
        := R'0[XxOoBb][\da-fA-F]+';

Decimal := R'\d+(?:\.\d+|)(?:E\-{0,1}\d+|)' ;

Constant:= K'null|false|true';

NEWLINE := R'\n';

EOL     := R';';

I       ::=  NEWLINE | Comment | multilineComment ;

simpleName := R'[a-zA-Z_][a-z0-9A-Z_]*' ; 

Identifier ::= simpleName | '`' simpleName '`' ;

labelDeclaration ::= ':' Identifier ;

block   ::= '{' 
                [variableDeclarationEntryList [':' Type | '=>' Type] '->']
                statements              # 若没有定义形式参数, 则类似kotlin的`it`或者scala的`_`
            '}'  ;


body    ::=  block  | statement ;

# module related


module  ::= simpleName (',' simpleName)* ;

moduleDeclaration
        ::= 'module' module ;

Import  ::= 'import' module ;


# statement 

statement
        ::= ( flowControl  |
              declaration  |
              flowControlSign [Identifier] |
              expression
            ) [EOL] 
        ;


flowControlSign
        := 'break|return|continue' ;

flowControl
        ::= If | While ;

If      ::= 'if' '(' expression ')'
                body
            [
            'else'
                body
            ]
        ;
While   ::=  [labelDeclaration]
             'while' '(' expression  ')'
                body
        ;
# declaration

declaration
        ::= structDeclaration | moduleDeclaration | Import | variableDeclaration
        ;

structDeclaration Throw [I]
        ::= 'struct' Identifier '{'
                (I* variableDeclarationEntry [','] I*)*
            '}'
        ;

variableDeclarationEntry
        ::= Identifier [':' Type] ;

variableDeclarationEntryList Throw [I]
        ::= I* variableDeclarationEntry
                (I* ','
                 I* variableDeclarationEntry)*
                 I*
        ;

variableDeclaration Throw [I]
        ::= ('let' | 'var') variableDeclarationEntry [ '=' I* expression ]
        ;

Type    ::=  '[' [TypeList] '=>' Type ']' | Identifier
        ;

TypeList
        ::= Type (',' Type)*
        ;

genericParameters
        ::= '<' Identifier (',' Identifier)* '>'
        ;

# expression

BinaryOperator := R'\/\/|\/|\|\||\||\>\>|\<\<|\>\=|\<\=|\<\-|\>|\<|\=\>|\-\-|\+\+|\*\*|\+|\-|\*|\=\=|\=|\%|\^' ;
UnaryOperator  := R'\?|\!|\&|\$|\@|\+|\-|\~' ;

expression
        ::= LambdaDef | BinaryOperation ;

LambdaDef Throw [I]     
        ::= variableDeclarationEntry '->' body
            |
            '(' variableDeclarationEntryList ')' [':' Type | '=>' Type ] '->' body
            |
            block [':' Type]
            | [genericParameters] LambdaDef
        ;

BinaryOperation
        ::= UnaryOperation (BinaryOperator UnaryOperation)* ;


UnaryOperation
        ::= AtomExpr | UnaryOperator UnaryOperation ;


AtomExpr::= Atom Trailer* ;

expressionList Throw [I]
        ::= I* expression
                (I* ','
                 I* expression)*
                 I*
        ;

## call function and get members.

Trailer ::=  Call | Access ;

Call  Throw [I]
        ::= '(' [expressionList] ')' 
            [LambdaDef]
        ;

Access Throw [I]
        ::= I* '.' Identifier ;


Atom    ::= Constant | String | Identifier | numberLiteral | Decimal | '(' expression ')' ;


# extra
statements Throw [I]
        ::= (I* statement* I*)* ;

