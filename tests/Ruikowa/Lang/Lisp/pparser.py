# This file is automatically generated by EBNFParser.
from Ruikowa.ObjectRegex.Tokenizer import unique_literal_cache_pool, regex_matcher, char_matcher, str_matcher, Tokenizer
from Ruikowa.ObjectRegex.Node import AstParser, Ref, SeqParser, LiteralValueParser as L, LiteralNameParser, Undef
namespace = globals()
recur_searcher = set()
token_table = ((unique_literal_cache_pool["N"], regex_matcher('\n')),
               (unique_literal_cache_pool["N"], regex_matcher('\t')),
               (unique_literal_cache_pool["N"], char_matcher((' '))),
               (unique_literal_cache_pool["Atom"], regex_matcher('[^\(\)\s\`]+')),
               (unique_literal_cache_pool["auto_const"], char_matcher(('`', ')', '('))))

class UNameEnum:
# names

    someConst_as = unique_literal_cache_pool['as']
    someConst_we = unique_literal_cache_pool['we']
    someConst_can = unique_literal_cache_pool['can']
    someConst = unique_literal_cache_pool['someConst']
    N = unique_literal_cache_pool['N']
    Atom = unique_literal_cache_pool['Atom']
    Expr = unique_literal_cache_pool['Expr']
    Quote = unique_literal_cache_pool['Quote']
    Stmt = unique_literal_cache_pool['Stmt']
        
cast_map = {'as': unique_literal_cache_pool['someConst'], 'we': unique_literal_cache_pool['someConst'], 'can': unique_literal_cache_pool['someConst']}
token_func = lambda _: Tokenizer.from_raw_strings(_, token_table, ({"N"}, {}),cast_map=cast_map)
someConst = LiteralNameParser('someConst')
N = LiteralNameParser('N')
Atom = LiteralNameParser('Atom')
Expr = AstParser([Ref('Atom')],
                 [Ref('Quote')],
                 ['(', SeqParser([Ref('Expr')], at_least=0,at_most=Undef), ')', SeqParser([('someConst', 'as'), ('someConst', 'we'), ('someConst', 'can')], at_least=1,at_most=1)],
                 name="Expr",
                 to_ignore=({}, {}))
Quote = AstParser(['`', Ref('Expr')],
                  name="Quote",
                  to_ignore=({}, {}))
Stmt = AstParser([SeqParser([Ref('Expr')], at_least=0,at_most=Undef)],
                 name="Stmt",
                 to_ignore=({}, {}))
Stmt.compile(namespace, recur_searcher)