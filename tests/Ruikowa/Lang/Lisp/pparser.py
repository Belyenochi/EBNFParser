# This file is automatically generated by EBNFParser.
from Ruikowa.ObjectRegex.Tokenizer import unique_literal_cache_pool, regex_matcher, char_matcher, str_matcher, Tokenizer
from Ruikowa.ObjectRegex.Node import AstParser, Ref, SeqParser, LiteralValueParser, LiteralNameParser, Undef
namespace = globals()
recur_searcher = set()
token_table = ((unique_literal_cache_pool["someConst"], str_matcher(('we', 'can', 'as'))),
               (unique_literal_cache_pool["N"], regex_matcher('\n')),
               (unique_literal_cache_pool["N"], regex_matcher('\t')),
               (unique_literal_cache_pool["N"], char_matcher((' '))),
               (unique_literal_cache_pool["Atom"], regex_matcher('[^\(\)\s\`]+')),
               (unique_literal_cache_pool["auto_const"], char_matcher((')', '('))),
               (unique_literal_cache_pool["auto_const"], str_matcher(('we', 'can', 'as'))),
               (unique_literal_cache_pool["auto_const"], char_matcher(('`'))))

class UNameEnum:
# names
    auto_const = unique_literal_cache_pool['auto_const']
    someConst = unique_literal_cache_pool['someConst']
    Atom = unique_literal_cache_pool['Atom']
    Expr = unique_literal_cache_pool['Expr']
    N = unique_literal_cache_pool['N']
    Quote = unique_literal_cache_pool['Quote']
    Stmt = unique_literal_cache_pool['Stmt']
# values
    someConst_we = unique_literal_cache_pool['we']
    someConst_can = unique_literal_cache_pool['can']
    auto_const_as = unique_literal_cache_pool['as']
    auto_const_can = unique_literal_cache_pool['can']
    auto_const_we = unique_literal_cache_pool['we']
    someConst_as = unique_literal_cache_pool['as']
        
token_func = lambda _: Tokenizer.from_raw_strings(_, token_table, ({"N"}, {}))
someConst = LiteralNameParser('someConst')
N = LiteralNameParser('N')
Atom = LiteralNameParser('Atom')
Expr = AstParser([Ref('Atom')],
                 [Ref('Quote')],
                 ['(', SeqParser([Ref('Expr')], at_least=0,at_most=Undef), ')', SeqParser(['as', 'we', 'can'], at_least=1,at_most=1)],
                 name="Expr",
                 to_ignore=({}, {}))
Quote = AstParser(['`', Ref('Expr')],
                  name="Quote",
                  to_ignore=({}, {}))
Stmt = AstParser([SeqParser([Ref('Expr')], at_least=0,at_most=Undef)],
                 name="Stmt",
                 to_ignore=({}, {}))
Stmt.compile(namespace, recur_searcher)