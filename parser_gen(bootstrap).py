
from Misakawa.ObjectRegex.Node import Ref, AstParser, SeqParser, LiteralParser, MetaInfo
import re
namespace     = globals()
recurSearcher = set()
token = re.compile('|'.join(['\}','\|','\{','\]','\\n','\[','\:\=','\:\:\=','\+','\*','\)','\(','"[\w|\W]*?"','[a-zA-Z_][a-zA-Z0-9]*','\d+']))
Expr = AstParser([Ref('Or'),SeqParser([LiteralParser.Eliteral('|', name = '\'|\''),Ref('Or')])], name = 'Expr')
Or = AstParser([SeqParser([Ref('AtomExpr')], atleast = 1)], name = 'Or')
AtomExpr = AstParser([Ref('Atom'),SeqParser([Ref('Trailer')])], name = 'AtomExpr')
Atom = AstParser([Ref('Str')],[Ref('Name')],[LiteralParser.Eliteral('[', name = '\'[\''),Ref('Expr'),LiteralParser.Eliteral(']', name = '\']\'')],[LiteralParser.Eliteral('(', name = '\'(\''),Ref('Expr'),LiteralParser.Eliteral(')', name = '\')\'')], name = 'Atom')
Equals = AstParser([Ref('Name'),Ref('LitDef'),Ref('Str')],[Ref('Name'),Ref('Def'),Ref('Expr')], name = 'Equals')
Trailer = AstParser([LiteralParser.Eliteral('*', name = '\'*\'')],[LiteralParser.Eliteral('+', name = '\'+\'')],[LiteralParser.Eliteral('{', name = '\'{\''),SeqParser([Ref('Number')], atleast = 1, atmost = 2),LiteralParser.Eliteral('}', name = '\'}\'')], name = 'Trailer')
Stmt = AstParser([SeqParser([SeqParser([LiteralParser.Eliteral('\n', name = '\'\n\'')]),SeqParser([Ref('Expr')]),SeqParser([LiteralParser.Eliteral('\n', name = '\'\n\'')])])], name = 'Stmt')
LitDef = LiteralParser.Eliteral(':=', name = 'LitDef')
Def = LiteralParser.Eliteral('::=', name = 'Def')
Str = LiteralParser('"[\w|\W]*?"', name = 'Str')
Name = LiteralParser('[a-zA-Z_][a-zA-Z0-9]*', name = 'Name')
Number = LiteralParser('\d+', name = 'Number')
Expr.compile(namespace, recurSearcher)
Or.compile(namespace, recurSearcher)
AtomExpr.compile(namespace, recurSearcher)
Atom.compile(namespace, recurSearcher)
Equals.compile(namespace, recurSearcher)
Trailer.compile(namespace, recurSearcher)
Stmt.compile(namespace, recurSearcher)
